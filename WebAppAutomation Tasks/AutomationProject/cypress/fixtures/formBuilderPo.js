module.exports = {
  // Form Builder Selector Builder
  fieldContainerSelector: (index) => `.content > [data-c="canvas-item-${index}"]`,
  genericFieldContainer: 'div[class*="canvas-fields context-card"]',
  tinyMceTextArea: '[class="tox-edit-area"]',
  fieldContainerLabelSelector: (index) => `.content > [data-c="canvas-item-${index}"] .wrapper-label`,
  fieldContainerInputSelector: (index) => `[data-c="canvas-item-${index}"] input`,
  fieldSettingSelector: (index) => `[data-i="canvas-setting-button-${index}"]`,
  fieldTrashSelector: (index) => `[data-i="canvas-trash-button-${index}"]`,
  formBuilderCanvasField: (field) => `//div[contains(@class,"form-builder-canvas")]//label[text()[contains(.,"${field}")]]`,
  formBuilderTextField: (field) => `//label[text()[contains(.,"${field}")]]/following-sibling::div//input`,
  formPreviewFieldSelector: (index) => `.content [data-i="canvas-field-${index}"]`,
  generalSettingsTab: '//li[text()[contains(., "General Settings")]]',
  dataSettingsTab: '//li[text()[contains(., "Data Settings")]]',
  scaleDesignTab: '//li[text()[contains(., "Scale Design")]]',
  formAccessPermissionRow: (index) => `[data-c="form-formAccess-section"] [data-c="form-role-permissions"]:nth-of-type(${index})`,
  staffOversightPermissionRow: (index) => `[data-c="form-staffOversight-section"] [data-c="form-role-permissions"]:nth-of-type(${index})`,
  fieldAccessPermissionRow: (index) => `//div[@data-c="form-fieldAccess-section"]//div[@class="column"]/div[${index}]`,
  fieldAccessContainer: (index) => `//div[@data-c="form-fieldAccess-section"]/div[${index + 3}]`,
  fieldAccessSelectedRespondent: (role) => `[data-c="field-access-role-${role}"]`,
  formFields: '.content > [data-c^="canvas-item"]',
  formsNav: '//div[contains(@class,"sidenav-body")]//div[text()[contains(.,"Forms")]]',
  importForm: '[data-i="form-add-button"]:first-of-type',
  addForm: '[data-i="form-add-button"]',
  addFormText: 'Add Form',
  deleteForms: '[data-i="forms-delete-button"]',
  createNew: '[data-i="form-add-btn"]',
  copyExisting: '[data-i="form-copy-btn"]',
  createNewButtonText: 'Create New',
  copyExistingButtonText: 'Copy Existing',
  searchField: '[data-i="searchTerm-input-element"]',
  iconThumbnail: '.icon-container',
  imageThumbnail: '.image-thumbnail',
  formTemplate: {
    formSelection: {
      backToFormsList: '[data-i="back-to-forms-list"]',
      selectATrialToAddForms: '[data-i="trial-dropdown"]',
      selectATrialToAddFormsTxt: 'Select a trial to add form(s)',
      continue: '[data-i="form-add-continue"]',
      formSearch: '[data-c="form-search"]',
      clearAll: '[data-i="clear-all"]',
      filter: '[data-i="filter-btn"]',
      filterReady: '[data-i="filter-ready"]',
      filterDraft: '[data-i="filter-draft"]',
      filterPatientReportedOutcome: '[data-i="filter-epro"]',
      filterConsent: '[data-i="filter-econsent"]',
      filterCaseReport: '[data-i="filter-ecrf"]',
      formCardContainers: '.form-content > [data-c^="form-container"]',
      formCardContainer: (index) => `[data-c="form-container-${index}"]`,
      searchFormTitle: '[data-i="form-container-title]',
    },
    editReviewForms: {
      editAndReviewFormsTxt: 'Edit and review forms',
      addForm: '[data-i="add-form"]',
      backToSelectedForms: '[data-i="back-to-select-forms"]',
      formEditRow: (index) => `[data-c="selected-form-${index}"]`,
      newFormLabel: '[data-i="label-input-element"]',
      newFormTitle: '[data-i="title-input-element"]',
      formOID: '[data-i="formOid-input-element"]',
      status: 'Status',
      deleteIcon: '[data-icon="trash-alt"]',
      unsavedChangesMsg: 'Are you sure you want to navigate away from this page? All form edits will be lost and the forms will not be copied to the trial.',
    },
    paginationComponents: '[class*="button page-button-comp"]',
    pagination: (index = 5) => `div[class*='TableFooterContainer'] button:nth-child(${index})`,
  },
  importFormDetail: {
    fileInput: '//div[@data-c="import-form-modal"]//input[@type="file"]',
    formName: '[data-i="title-input-element"]',
    close: '[data-i="import-form-modal-cancel-btn"]',
    import: '[data-i="import-form-modal-confirm-btn"]',
  },
  subNav: {
    configureTab: '[data-i="form-builder-subheader-tab-Configure"]',
    buildTab: '[data-i="form-builder-subheader-tab-Build"]',
    previewTab: '[data-i="form-builder-subheader-tab-Preview"]',
  },
  configure: {
    leftDrawerSection: '.form-builder-left-drawer',
    sideNav: {
      settings: '[data-i="form-tab-Settings"]',
      roleAccess: '[data-i="form-tab-roleAccess"]',
      conditions: '[data-i="form-tab-conditions"]',
      translations: '[data-i="form-tab-translations"]',
    },
    settings: {
      formSettingContainer: '[data-c="form-generalFormSettings"]',
      title: '[data-i="form-setting-title-input-element"]',
      label: '[data-i="form-setting-label-input-element"]',
      description: '[data-i="form-setting-description-textarea-element"]',
      formOIDLabel: 'Form OID',
      fieldMessage: (text) => `//div[contains(text(),'${text}')]`,
      formOID: '[data-i="form-setting-sponsorVariable-input-element"]',
      formOIDPlaceholderText: 'Type something',
      formOIDPlaceholder: "//input[@placeholder='Type something']",
      standardVariable: '[data-i="form-setting-standardVariable-input-element"]',
      formType: {
        patientReportedOutcome: '[data-i="form-type-epro"]',
        caseReportForm: '[data-i="form-type-ecrf"]',
        consent: '[data-i="form-type-econsent"]',
      },
      buildLanguage: '[data-c="form-setting-defaultLangCode"]',
      disabledBuildLanguage: '.Select.customSpecification.is-disabled',
      specifications: {
        requireEditReasoningElement: '[data-c="form-setting-specifications-checkbox-element"]',
        requireEditReasoning: 'Require edit reason for respondent',
        requireEditReasoningDetail: 'If the form is completed, a reason must be specified for any response change.',

        exportTheFormInDataExportElement: '[data-c="form-setting-excludeFromDataExport-checkbox-element"]',
        exportTheFormInDataExport: 'Exclude from data exports',
        exportTheFormInDataExportDetail: 'This form will not be included when exporting the trial data.',

        requireResourceDataReviewElement: '[data-c="form-setting-sourceDataReview-checkbox-element"]',
        requireResourceDataReview: 'Require data review by Study Monitor',
        requireResourceDataReviewDetail: 'Accounts with Study Monitor access can view this form and its contents.',
      },
      pdfTemplate: {
        pdfTemplateContainer: '.pdfTemplate',
        pdfUpload: '.pdfTemplate input',
        pdfLoadingProgress: '.progress-bar-loading',
        pdfThumbnail: '.pdf-thumbnail-container',
        pdfFileName: '.pdf-file-name',
        remove: 'Remove',
        removeBtn: '.remove-button',
        pdfUploadText: 'Link an annotated PDF template',
        pdfUploadSubText: "Upload a PDF that will serve as a template for the completed PDF document with a respondent's answers from the form. NOTE: PDF must be properly prepared with field variable codes that link to the questions in your form.",
        pdfPreviewContainer: '.body div#pdf-viewer-modal.is-active',
        pdfPreviewDocument: '.body div#pdf-viewer-modal.is-active .react-pdf__Document',
        pdfPreviewClose: '.body div#pdf-viewer-modal.is-active [data-icon="times"]',
      },
    },
    roleAccess: {
      formAccess: {
        formAccessContainer: '[data-c="form-formAccess-section"]',
        addRoleBtn: 'div[data-c="form-formAccess-section"] div[class*="AddItemButton"]',
        addRole: '//div[text()="Add Role"]',
        formSettingRole: '[data-c="form-setting-role"] input',
        formSettingPermission: '[data-c="form-setting-permission"] input',
        formRolePermission: '[data-c="form-role-permissions"]',
        roleSelectArrow: '[data-c="form-setting-role"] span[class="Select-arrow"]',
        permissionSelectArrow: '[data-c="form-setting-permission"] span[class="Select-arrow"]',
        expandPermission: '[data-icon="chevron-down"]',
        collapsePermission: '[data-icon="chevron-up"]',
        deletePermissionIcon: '[data-icon="times"]',
        respondentMustAccessInOrderElement: '[data-c="form-setting-respondentsOrder-checkbox-element"]',
        respondentMustAccessInOrder: 'Respondents must answer in this order',
        respondentMustAccessInOrderChecked: '[data-c="form-setting-respondentsOrder"] input.is-checked',
      },
      fieldAccess: {
        fieldAccessContainer: '[data-c="form-fieldAccess-section"]',
        fieldAccessViewEdit: '[data-i="btn-permission-viewEdit"]',
        fieldAccessView: '[data-i="btn-permission-view"]',
        fieldAccessHide: '[data-i="btn-permission-hide"]',
        expandPermission: '[data-icon="chevron-down"]',
        collapsePermission: '[data-icon="chevron-up"]',
        fieldPermissionSelected: 'button[class*="outline-basicbutton"]',
      },
      staffOversight: {
        staffOversightContainer: '[data-c="form-staffOversight-section"]',
        signOffOrderContainer: '[data-c="form-setting-signoffOrdering"]',
        signOffOrderDisabled: '[data-c="form-staffOversight-section"] [data-c="form-setting-signoffOrdering"] div.disabled',
        signOffOrderChecked: '[data-c="form-staffOversight-section"] [data-c="form-setting-signoffOrdering"] input.is-checked',
        formSignOffInOrder: 'Form must be signed off on in order',
        // addRole: '//div[contains(text(),"Add Role")]',
        addRole: '[data-icon="plus"]',
        addRoleDisabled: '//div[contains(text(),"Add Role")]/parent::div[@disabled]',
        addRoleNotDisabled: '//div[contains(text(),"Add Role")]/parent::div[not(@disabled)]',
        roleSelectArrow: '[data-c="form-setting-role"] span[class="Select-arrow"]',
        deleteOversightRoleIcon: '[data-icon="times"]',
        fieldTitle: 'Staff Oversight',
      },
      defaultRespondent: {
        defaultRespondentContainer: '[data-c="form-defaultRespondent-section"]',
        respondentSelectArrow: '[data-c="form-defaultRespondent-section"] span[class="Select-arrow"]',
        fieldTitle: 'Default Respondent',
      },
    },
    conditions: {
      branchingLogic: {
        branchingLogicContainer: '[data-c="form-landingPage"]',
        addNewCondition: '//div[contains(text(),"Add New Condition")]',
        conditionContainer: (index) => `[data-c="form-landingPage"] > div:nth-of-type(${index + 3})`, // (condition starts at 4th div)
        deleteCondition: '[data-icon="trash-alt"]',
        editCondition: '[data-icon="edit"]',
      },
      editCondition: {
        editConditionContainer: '[data-c="form-editCondition"]',
        ifContainer: (index = 1) => `div[class^="List"].if:nth-of-type(${index})`,
        dropDownOption: (index = 1) => `[class="Select-menu-outer"] [class*="dropdown-options"]:nth-child(${index})`,
        totalElementsInDropDown: '[class="Select-menu-outer"] [class*="dropdown-options"]',
        thenContainer: 'div[class^="List"].then',
        thenContainerXpath: '//div[contains(@class, "then")]',
        addField: '[data-icon="plus-circle"]',
        fieldLabelRowContainer: (index) => `div[class^="Row"].if:nth-of-type(${index})`,
        fieldLabelRowOption: '[data-icon="ellipsis-h"]',
        fieldLabel: 'Field',
        operator: 'Operator',
        value: 'Value',
        event: 'Event',
        field: 'Field',
        addAndOr: 'div[class="edit-condition-page-row"] > span',
        andOrIfBtn: 'div:nth-of-type(1) > div:nth-of-type(1)  div[class*="DropdownMiniTrigger"] button',
        allOrAnyBtn: 'div:nth-of-type(1) > div:nth-of-type(2)  div[class*="DropdownMiniTrigger"] button',
        backToEditCondition: '[data-icon="arrow-left"]',
      },

    },
    translations: {
      sectionTitle: 'div[class*=SectionTitle]',
      sectionTitleText: 'Translations',
      translationRowCarrot: (row) => `.content > div[class*=Translation]:nth-child(${row}) > div > span[class*=HeaderIcon]`,
      translationRow: (language) => `//div[text()[contains(., "${language}")]]`,
      downloadAllFilesLink: (language) => `//div[text()[contains(., "${language}")]]/following-sibling::div//a[text()[contains(., "Download File(s)")]]`,
      uploadedFileInformation: (fileDetail) => `//hr/following-sibling::div[contains(@data-i, "translations-accordion")]//div[text()[contains(., "${fileDetail}")]]`,
      translationRowEllipsisIcon: (row) => `//hr/following-sibling::div[contains(@data-i, "translations-accordion")]//div[contains(@class, "_File-")][${row}]//div[contains(@class, "action")]`,
      defaultLanguageJsonFileName: 'translation.json',
      defaultLanguageJsonFileExtension: 'json',
      defaultLanguageImageFileName: 'profile.jpg',
      // ellipsisIcon: '[data-icon="ellipsis-h"]',
      ellipsisMenu: 'div[class*="translation-file-popover"] div[class*="popover-inner"] div[class*="dropdown-content"]',
      downloadFile: '[data-i="translation-download-action"]',
      downloadText: 'Download',
      replaceFile: '[data-i="translation-replace-action"]',
      replaceText: 'Replace',
      deleteFile: '[data-i="translation-delete-action"]',
      deleteText: 'Delete',
      translationRowFileType: (row) => `[class*= "Translation"]:nth-child(${row}) .type`,
      translationRowFiles: '.styles__File-sc-1n3vr3j-1',
      uploadButton: 'button[class*="upload-translations-button"]',
      deleteConfirmationTxt: 'Deleting the JSON file will also remove any images associated with this language. This action cannot be undone.',
      confirmDeleteBtn: '[data-i="delete-attachment-modal-confirm-btn"]',
    },
  },
  build: {
    formDetailsHeader: 'a[class="info-header"]',
    leftDrawerSection: '[data-c="left-side-fields-drawer"]',
    leftDrawerSectionField: '[data-c="left-side-fields-drawer"] > div div',
    leftDrawerSectionFistGroupElements: '[data-c="left-side-fields-drawer"] > div:first-of-type > div span',
    fields: {
      text: '[data-c="draggable-BasicInput-field"]',
      textArea: '[data-c="draggable-TextArea-field"]',
      dropdown: '[data-c="draggable-Dropdown-field"]',
      multipleChoice: '[data-c="draggable-CheckboxGroup-field"]',
      dateTime: '[data-c="draggable-DateTime-field"]',
      number: '[data-c="draggable-InputNumber-field"]',
      eqVas: '[data-c="draggable-RangeScale-field"]',
      checkbox: '[data-c="draggable-Checkbox-field"]',
      fileUpload: '[data-c="draggable-FileUpload-field"]',
      numericRatingScale: '[data-c="draggable-RatingScale-field"]',
      visualAnalogScale: '[data-c="draggable-VASRange-field"]',
      derivedField: '[data-c="draggable-FormulaView-field"]',
    },
    elements: {
      richText: '[data-c="draggable-RichTextEditor-field"]',
      pageBreak: '[data-c="draggable-PageBreak-field"]',
      image: '[data-c="draggable-Image-field"]',
      footer: '[data-c="draggable-Footer-field"]',
      header: '[data-c="draggable-Header-field"]',
    },
    mceTextWidget: {
      fontSize: (sizeNo) => `//div[contains(text(),'${sizeNo}')]`,
      optionBtnGS: (btnNo) => `.tox-toolbar__group:nth-child(1) > .tox-tbtn:nth-child(${btnNo}) svg`,
      optionBtn: (panelNo, btnNo) => `.tox-toolbar__group:nth-child(${panelNo}) > .tox-tbtn:nth-child(${btnNo}) svg`,
      splitArrowBtn: (panelNo, btnNo) => `.tox-toolbar__group:nth-child(${panelNo}) > .tox-split-button:nth-child(${btnNo}) > .tox-tbtn > svg > path`,
      splitBtn: (panelNo, btnNo) => `.tox-toolbar__group:nth-child(${panelNo}) > .tox-split-button:nth-child(${btnNo}) .tox-icon > svg`,
      colourSelector: (rowNo = 1, colNo = 2) => `.tox-swatches__row:nth-child(${rowNo}) > .tox-swatch:nth-child(${colNo})`,
      numberToolTip: (rowNo = 1, colNo = 2) => `.tox-collection__group:nth-child(${rowNo}) > .tox-menu-nav__js:nth-child(${colNo}) svg`,
      symbolToolTip: (colNo = 2) => `.tox-menu-nav__js:nth-child(${colNo}) svg`,
      dropdownSelector: (text) => `[class="tox-collection__group"] [title="${text}"]`,
      hypertextFieldSelector: (index = 1) => `.tox-form__group:nth-child(${index})`,
      modalFooterBtn: (index = 1) => `.tox-dialog__footer-end > .tox-button:nth-child(${index})`,
      specialCharacterSelector: (index = 1) => `.tox-collection__item:nth-child(${index}) > .tox-collection__item-icon`,
    },
    fieldGroups: {
      consentSignature: '[data-c="draggable-Group-field"]',
      table: '[data-c="draggable-SortableTable-field"]',
    },
    // middleSection: '//div[contains(@class,"form-builder-canvas")]',
    // middleSection: '.form-builder-canvas',
    middleSection: '[data-c="form-builder-center-canvas"]',
    formTitle: '[data-c="form-title-field"]',
    // generalFieldSettingSection: '//div[contains(@class,"settings")]',
    generalFieldSettingSection: '.settings',
    generalSettingSection: '[data-i="field-settings-generalSettings"]',
    dataSettingSection: '[data-i="field-settings-dataSettings"]',
    generalFieldSettings: {
      firstField: '[data-i="field-settings-generalSettings"] [class*="InnerSection"]:first-child [class*="canvas-field"]:first-of-type',
      closeIcon: 'div.field-name > svg',
      backIcon: '[data-icon="chevron-left"]',
      title: 'Title',
      elementTitle: 'div[data-c="FieldSettingsContainer"] > div:nth-child(2) [data-i="BasicInput-field-input-element"]',
      fieldLabelRichText: '[title="Rich Text Area"]',
      fieldLabelRichTextDisabled: '.tox-tinymce--disabled',
      fieldLabel: 'Field Label',
      fieldVariableName: 'Field Variable Name',
      elementStandardVariable: 'div[data-c="FieldSettingsContainer"] > div:nth-child(4) [data-i="BasicInput-field-input-element"]',
      standardVariable: 'Standard Variable',
      fieldOID: 'Field OID',
      elementFieldOID: 'div[data-c="FieldSettingsContainer"] > div:nth-child(1) [data-i="BasicInput-field-input-element"]',
      fieldOIDSelector: '//label[text()[contains(., "Field OID")]]/following-sibling::div//input',
      fieldCode: 'Field Code',
      description: 'Description',
      elementDescription: '[data-i="TextArea-field-textarea-element"]',
      helpText: 'Help Text',
    },
    miscellaneousFieldSettings: {
      requiredField: 'Required field',
      requiredFieldCaps: 'Required Field',
      checkBoxByDefault: 'Check box by default',
      checkboxPageBreak: 'Add page break after field',
      pageBreakDownCheckBox: '[data-c="Checkbox-field-checkbox-element"]',
      allCheckboxes: 'div[class*="checkbox-field-section"] > input[disabled]',
      lastElement: '[data-i="field-settings-generalSettings"] [data-c="FieldSettingsContainer"]:nth-last-of-type(1) > div:nth-last-of-type(1)',
    },
    headerFooterDisplaySettings: {
      displayAllPagesLabel: 'Display on all pages',
      displayFirstPageLabel: 'Display on first page only',
      displayFirstLastPagesLabel: 'Display on first and last page only',
      displayDefinedRangeLabel: 'Display on defined page range',
      pagesRangeInputField: '[data-c="FieldSettingsContainer"] [data-i="BasicInput-field-input-element"]',
      radioBtn: (option) => `//label[text()[contains(., "${option}")]]//input[@type='radio' and @checked]`,
      headerElementMiddleSection: '[data-c="Header-canvas-field"][type="Header"]',
      footerElementMiddleSection: '[data-c="Footer-canvas-field"][type="Footer"]',
    },
    fieldSettings: {
      backIcon: '[class*="BackButton"]',
      fieldSettingContainer: '[data-i="field-settings-sub"]',
      consentSignature: {
        text: '[data-i="field-settings-sub-text"]',
        signature: '[data-i="field-settings-sub-signature"]',
        dateAndTime: '[data-i="field-settings-sub-datetime"]',
      },
    },
    dataSettings: {
      container: '[data-i="field-settings-dataSettings"]',
      text: {
        maximumCharacterLength: 'Maximum Character Length',
        elementMaximumCharacterLength: '[data-i="InputNumber-field-input-element"]',
        placeHolderText: 'Placeholder text',
        placeHolderTextCaps: 'Placeholder Text',
        elementPlaceHolderText: '[data-i="BasicInput-field-input-element"]',
      },
      dropDown: {
        options: 'Options',
        defaultValue: 'Default Value',
      },
      multipleChoice: {
        multipleChoiceType: 'Multiple Choice Type',
        options: 'Options',
        defaultValue: 'Default Value',
      },
      dateTime: {
        dateTimeType: 'Type',
        minimumDate: 'Minimum Date',
        maximumDate: 'Maximum Date',
        captureDateAndTimeOnSubmit: 'Capture date and time on submit',
        doNotAllowFutureDates: 'Do not allow future dates',
        pastAndFutureDatesAreAllowed: 'Past and future dates are allowed',
        captureTimeOnSubmit: 'Capture time on submit',
        periodOfTime: 'Period of time',
        shouldOccur: 'Should occur',
      },
      number: {
        numberType: 'Number Type',
        decimalScale: 'Decimal Scale',
        defaultValue: 'Default Value',
        minimumValue: 'Minimum Value',
        maximumValue: 'Maximum Value',
      },
      eqVas: {
        fromText: 'From Text',
        toText: 'To Text',
        minValue: 'Min Value',
        maxValue: 'Max Value',
      },
      checkBox: {
        value: 'Value',
      },
      image: {
        imageUpload: '[data-c="ImageUpload-field"] input',
        imageAlignment: {
          left: '[data-i="btn-imageAlignment-left"]',
          center: '[data-i="btn-imageAlignment-center"]',
          right: '[data-i="btn-imageAlignment-right"]',
        },
        imageLoading: '.progress-bar-loading',
        imageThumbnail: '[class^="Thumbnail"]',
        imageLink: '.settings img',
      },
      numericRatingScale: {
        min: 'Min',
        max: 'Max',
        minimumValueLabel: 'Minimum Value Label',
        maximumValueLabel: 'Maximum Value Label',
        naOption: 'N/A Option',
        label: 'Label',
      },
      visualAnalogScale: {
        displayValueIndicator: 'Display Value Indicator',
        valueIndicatorLabel: 'Value Indicator Label',
        minimumValueLabel: 'Minimum Value Label',
        medianValueLabel: 'Median Value Label',
        maximumValueLabel: 'Maximum Value Label',
        minimumValue: 'Minimum Value',
        maximumValue: 'Maximum Value',
        naOption: 'N/A Option',
        naOptionLabel: 'Not Applicable Label',
        label: 'Label',
      },
      derivedField: {
        decimalScale: 'Decimal Scale',
        derivedValue: 'Derived Value',
      },
      table: {
        respondentCanAddRow: 'Respondents can add rows',
        rowLabels: 'Row labels',
        labelEncoding: '[data-icon="chevron-down"]',
      },
    },
    flagSensitiveDataExport: {
      personalIdentifiableInformation: 'Personal Identifiable Information(PII)',
      protectedHealthInformation: 'Protected Health Information(PHI)',
      excludeFieldFromExports: 'Exclude this field from all data exports',
      lastElement: '[data-i="field-settings-dataSettings"] [data-c="FieldSettingsContainer"]:nth-last-of-type(1) > div:nth-last-of-type(1)',
    },
    scaleDesignSettings: {
      container: '[data-i="field-settings-scaleDesign"]',
      horizontal: 'Horizontal',
      vertical: 'Vertical',
      minimumValue: 'Minimum Value',
      maximumValue: 'Maximum Value',
      dontShowNumericValueToParticipant: 'Do not show numeric value to participant',
      showIncrements: 'Show Increments',
      majorIncrements: 'Major Increments',
      minorIncrements: 'Minor Increments',
      showValueSlider: 'Show value slider',
      scaleAdjust: 'Scale will adjust based on device size',
      scaleConsistent: 'Scale will be consistent across all device sizes',
    },
    optionalPresetSettings: {
      vasPresetsDropdownTxt: 'VAS Presets',
      vasPresetsDropdown: '[data-c="Dropdown-field"]',
      // if a preset is chosen the fields in the scale design have predefined values and are read only
      radioBtn: (option) => `//div[contains(@class, "disabled")]//label[text()[contains(., "${option}")]]//input[@type='radio' and @checked]`,
      checkbox: (option) => `//div[contains(@class, "disabled")]//input[contains(@class, "is-checked")]/following-sibling::label//span[text()[contains(., "${option}")]]`,
    },
    table: {
      tableContainer: '[data-c="SortableTable-canvas-field"]',
      titleRow: '[data-c="table-title-row"]',
      titleCol: (colIndex) => (`[data-i="table-title-col-${colIndex}"]`),
      labelRow: '[data-c="table-label-row"]',
      labelCol: (colIndex) => (`[data-i="table-label-col-${colIndex}"]`),
      addColumn: '[data-i="table-add-column"]',
      dataRow: (rowIndex) => (`[data-c="table-data-row-${rowIndex}"]`),
      tableCounter: (rowIndex) => (`[data-i="table-counter-${rowIndex}"]`),
      addRow: '[data-i="table-add-row"] button',
      deleteIco: '[data-icon="trash-alt"]',
      settingIco: '[data-icon="cog"]',
      fieldPopOver: '.popover-inner',
      emptyLabel: 'td[data-i="table-label-col-1"][class*="Empty"]', // Helpful to check if row labels is checked
      generalSetting: {
        fieldLabel: 'Field Label',
        fieldLabelRichText: '[title="Rich Text Area"]',
        description: 'Description',
        placeHolderText: 'Placeholder text',
        options: 'Options',
        inputTypeInteger: '[data-i="btn-numberType-n"]',
        inputTypeDecimal: '[data-i="btn-numberType-d"]',
      },
    },
    formCanvas: {
      fileUpload: {
        fileInput: '//input[@type="file"]',
        fileLoading: '.progress-bar-loading',
        remove: 'Remove',
        cancel: 'Cancel',
        fileContainer: '.pdfdocument-container',
        fileName: '.pdf-file-name',
        canNotUploadInBuildModeText: 'You cannot upload files while in Build mode.',
      },
    },
  },
  preview: {
    nextPageBtn: "button[data-i='form-pagination-button-proceed']",
    previousPageBtn: "//button[@data-i='form-pagination-button-back']",
    pageNoDisplay: 'div[class*="FormPaginationContainer"] > div[class="page-number"]',
    totalFieldOnPage: '[class="styles__ItemPreview-sc-l766n-0 imQXbr"]',
    field: '[data-i^="canvas-field"]',
    fileUploadField: '[class="file-upload-comp"] input[disabled]',
    subHeader: {
      desktop: '.radio-group-button:nth-of-type(1) [data-c="Device-radio-group-item"] input',
      tablet: '.radio-group-button:nth-of-type(2) [data-c="Device-radio-group-item"] input',
      mobile: '.radio-group-button:nth-of-type(3) [data-c="Device-radio-group-item"] input',
    },
    view: {
      mobileView: '[mode="Mobile"]',
      tabletView: '[mode="Tablet"]',
      desktopView: '[mode="Desktop"]',
    },
    filter: {
      subFilterArrowBtns: 'span.Select-arrow',
      roleSearch: '[id="react-select-6--value"]',
    },
    role: 'Role',
    language: 'Language',
    proceedBtn: '[data-i="form-pagination-button-proceed"]',
    backBtn: '[data-i="form-pagination-button-back"]',
  },
  topNav: {
    close: '[data-i="form-builder-header-close-form"]',
    save: '[data-i="form-builder-header-save-form"]',
    ellipsis: '[data-i="form-builder-header-ellipsis-button"]',
    saveAsDraft: '[data-i="form-save-draft-btn"]',
    publishForm: '[data-i="form-save-publish-btn"]',
  },
  alertModal: {
    modalContainer: '[data-c="alert-modal"]',
    alertMsgContainer: '#alert-message',
    message: 'You have unsaved changes on this page. Are you sure you want to leave?',
    cancel: '[data-i="alert-modal-cancel-btn"]',
    confirm: '[data-i="alert-modal-confirm-btn"]',
  },
  publishForm: {
    alertModalContainer: '[data-i="alert-modal"]',
    alertModalTitle: 'Publish Form',
    alertModalMsgContainer: '#alert-message',
    alertModalMessage: 'Once published, this form cannot be edited. This action cannot be undone.\n'
      + '\n'
      + 'Please note: all forms in a visit plan must be published before they can be applied to a non-test site.',
    alertModalCancel: '[data-i="alert-modal-cancel-btn"]',
    alertModalPublish: '[data-i="alert-modal-confirm-btn"]',
  },
  formList: {
    deleteBtn: '[data-i="form-delete-btn"]',
    deleteConfirmMsg: 'Are you sure you want to delete the form(s) from the study?',
    clearAllBtn: '[data-i="clear-all"]',
    filterBtn: '[data-i="filter-btn"]',
    activeFiltersContainer: '[class*="SelectedFilters"]',
    filterPopoverContainer: '[class*="filter-menu"]',
    filterOption: (option) => `//span[text()="${option}"][1]`,
  },
};

// ---- MY PO's ----
export const extraForm = {
  addBtnForm: '[data-i="form-add-button"]',
  createNewForm: '[data-i="form-add-btn"]',
  saveBtnForm: '#save-menu',
  eclipseBtnForm: '[data-i="form-builder-header-ellipsis-button"]',
  publishBtnForm: '[data-i="form-save-publish-btn"]',
  alertBtnForm: '[data-i="alert-modal-confirm-btn"]',
  checkboxWrapper: ':nth-child(3) > .styles__CheckboxWrapper-sc-11z37ji-0 > .checkbox-wrapper > :nth-child(2) > .checkbox-component > .checkbox-field-wrapper > .field > label'
};

export const allForms = {
  // configure tab
  formOid: '[data-i="form-setting-sponsorVariable-input-element"]',
  formTitle: '[data-i="form-setting-title-input-element"]',
  formLabel: '[data-i="form-setting-label-input-element"]',
  formOid: '[data-i="form-setting-sponsorVariable-input-element"]',
  formTypeECRF: '[data-i="form-type-ecrf"]',
  formTypeEPRO: '[data-i="form-type-epro"]',
  formTypeEconsent: '[data-i="form-type-econsent"]',

  //build tab

  buildTab: '[data-i="form-builder-subheader-tab-Build"]',

  // Text
  textControl: '[data-c="draggable-BasicInput-field"]',
    openTextSetting: '[data-c="BasicInput-field"]',
    textOid: ':nth-child(1) > .basic-input',
    textTitle: '#react-tabs-1 > :nth-child(1) > :nth-child(2)',
    textLabel: '[data-c="FormSettingsRichTextEditor-field"]',

   // TextArea
  textAreaControl: '[data-c="draggable-TextArea-field"]',
    openTextAreaSetting: '[data-c="canvas-item-1"]',






};
