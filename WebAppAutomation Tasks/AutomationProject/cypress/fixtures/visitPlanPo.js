export const list = { 
  addVisitPlan: '[data-i="forms-add-button"]',
  visitPlanOrder: '[data-i="visit-plan-order-button"]',
  activeTab: '.visit-plan-tab-active',
  deactivatedTab: '.visit-plan-tabs-label:not(.visit-plan-tab-active)',
  removedTab: '[data-i="Removed-list-button"]',
  removedTabText: 'Removed',
  activeTabText: 'Active',
  visitPlanListContainer: '.trial-list-table.data-table-container',
  firstItemList: '//tr[contains(@class,"table-row")][1]',
  statusButton: '[class*="StatusBadgeContainer"]',
  visitPlanTitle: '.header-title',
  visitListTitleCell: (searchTerm) => `[data-tip="${searchTerm}"]`,
};
export const listHeaders = {
  visitPlanGroup: 'Schedule Template Group',
  name: 'Name',
  createdDate: 'Created Date',
  updatedDate: 'Updated Date',
  status: 'Status',
};
export const formSettings = {
  formSettingsContainer: '.drawer',
  addFormDropdown: '.drawer .columns:nth-child(1) .Select',
  bulkAddFormSearch: '[data-i="item-search-input-element"]',
  bulkAddFormRow: '[class*="Multiselect-sc"] [class*="ItemRow-sc"]',
  bulkAddFormSelectAll: '[class*="Multiselect-sc"] [class*="checkbox-component select-all-checkbox item-checkbox"]',
  bulkAddFormNoResultMessage: 'No results based on your search criteria',
  timeOfDayDropdown: '.drawer .columns:nth-child(2) .Select',
  expirationDropdown: (order = 3) => `.drawer .columns:nth-child(${order}) .Select`,
  moreOptions: '[id="schedule-templates-form-secondary-actions"]',
  deleteForm: '.dropdown-item-text',
  template: '[data-i="template-input-element"]',
  closeBtn: '[class*="CloseButton"]',
  allDayTxt: 'All Day',
  specificTimePeriodTxt: 'Specific Time Period',
  frequencyCheckbox: '[data-c*="eDiary-checkbox-element"]',
  frequencyOption1: 'Follow Visit Plan',
  frequencyOption2: 'Daily',
  frequencyOption3: 'Weekly',
  selectAFormTxt: 'Select a form',
  timeOfDayTxt: 'Time of Day',
  expirationTxt: 'Expiration',
  episodicEdiary: 'Episodic eDiary',
  startTime: '.rdt > .start-time',
  endTime: '.rdt > .end-time',
  selectForm: (number = 1) => `[data-i="st-form-${number}-title"]`,
  formSettings: (number = 1) => `.add-form-section [data-i="st-form-settings-${number}-btn"]`,
  formDragHandle: (form = 1) => `.st-left-body-cell [data-i="st-form-${form}-drag-handle"]`,
  formReorderDestination: '[class*="RecurringFormContainer"]',
  removeForm: (visit = 1) => `.st-left-body-cell [data-i="st-trash-settings-${visit}-btn"]`,
  forms: '[class*="ScheduleTemplateFormContainer"]',
  episodicCheckbox: '[data-c*="Allow participant to submit the form multiple times, as needed for each occurrence.-checkbox-element"]',
  frequencySpecificDays: '[class*="DayButtonGroup"]',
  startByVisit: {
    startByVisitRadio: '[data-i="visit-start-radio-radio-element"]',
    startVisitDropdown: '.drawer [class*="ContextCard"]:nth-child(4) .columns:nth-child(3) .Select',
    endVisitDropdown: '.drawer [class*="ContextCard"]:nth-child(4) .columns:nth-child(4) .Select',
    frequencyDropdown: '.drawer [class*="ContextCard"]:nth-child(4) .columns:nth-child(1) .Select',
  },
  startByDate: {
    startByDateRadio: '[data-i="date-start-radio-radio-element"]',
    numberOfDaysAfterDate: '[data-i="daysAfterPreviousVisit-input-element"]',
    recurringFor: '[data-i="recurrence-input-element"]',
    dateFieldFromVisitDropdown: '.drawer [class*="ContextCard"]:nth-child(4) .columns:nth-child(1) .Select',
    frequencyDropdown: '.drawer [class*="ContextCard"]:nth-child(4) .columns:nth-child(5)',
  },
  startByCondition: {
    startByConditionRadio: '[data-i="condition-start-radio-radio-element"]',
    frequencyDropdown: '.drawer [class*="ContextCard"]:nth-child(4) .columns:nth-child(1) .Select',
    delayStartBy: '[data-i="delayStart-input-element"]',
    delayStartByDropdown: '.drawer [class*="ContextCard"]:nth-child(4) .columns:nth-child(4) .Select',
    recurFor: '[data-i="recurrence-input-element"]',
    StartEndPlaceholder: (index, locator) => `//div[contains(@class,"style__RecurringCellContainer-sc-d2bct6-0 kJEYnp")][${index}] //div[contains(@class,"recurring-form-cell-content")][4] //span[contains(text(),"${locator}")]`,
  },
  branchingLogic: {
    branchingLogicOpenComponent: 'svg[data-icon="angle-down"]',
    addBranchingLogic: '.fa-plus',
    addBranchingLogicDisabled: '.section-inactive',
    addBranchingLogicText: 'Add New Condition',
    selectVisit: '//span[contains(@class,"toggle-visit-text")]/following-sibling::span//*[name()="svg"]',
    visitDropdown: '[data-i="visit-BL-input-element"]',
    defineTrigger: '//span[contains(@class,"toggle-trigger-text")]/following-sibling::span//*[name()="svg"]',
    ifTrigger: 'div[class*="ContextCard"]:nth-child(9) .svg-inline--fa',
    thenAction: 'div[class*="ContextCard"]:nth-child(10) .svg-inline--fa',
    fieldLabel: '[data-i="field-BL-input-element"]',
    operator: '[data-i="operator-BL-input-element"]',
    value: '[data-i="value-BL-input-element"]',
    defineAction: '//span[contains(@class,"toggle-action-text")]/following-sibling::span//*[name()="svg"]',
    event: '[data-i="event-BL-input-element"]',
    selectForm: '[data-i="form-BL-input-element"]',
    removeCondition: '[class="remove-link"]',
    conditionRemovalTxt: 'Are you sure you want to remove this condition? Only the condition configurations will be removed from this form.',
    confirmRemoveBtn: '[data-i="alert-modal-confirm-btn"]',
    formListConditionIcon: '[class="branching-condition-icon"]',
    formConditionLogicIcon: (formNum = 1) => `.st-cell-container:nth-child(${formNum}) > svg.branching-condition-icon`,
  },
  formStatusIcon: (formIndex = 1, statusCode = 'ready-status') => `[class*="ScheduleTemplateFormContainer"]:nth-child(${formIndex}) > div > div:nth-child(3) > [class*="${statusCode}"]`,
};
export const config = {
  addVisitPlanTxt: '[data-c="context-bar-component-breadcrumbs"]',
  formNames: '[class="st-form-name"]',
  configureBtn: '[data-i="st-edit-btn"]',
  editVisitPlanText: 'Edit Visit Plan',
  viewVisitPlanText: 'View Visit Plan',
  templateTitle: '.form-input',
  templateTitleInput: '[data-i="title-input-element"]',
  templateDescriptionInput: '[data-i="visit-plan-description-textarea-element"]',
  templateProtocolVersionInput: '[class="field basic-input visit-plan-version"] [data-i="protocolVersion-input-element"]',
  visitSectionContainer: '[data-c="st-visit-section"]',
  visitSectionHeader: '[class="visit-day-header"]',
  // visitNumber: (number = 1) => `[data-i="st-visit-key-${number}-input-element"]`,
  visitNumber: (number = 1) => `div[role='rowgroup'] > div:nth-child(${number})`,
  visitDay: (number = 1) => `[data-i="st-visit-days-from-start-${number}-input-element"]`,
  visitMinusDay: (number = 1) => `.vd-number:nth-child(4) [data-i="st-visit-day-range-${number}-input-element"]`,
  visitPlusDay: (number = 1) => `.vd-number:nth-child(6) [data-i="st-visit-day-range-${number}-input-element"]`,
  addFormBtn: '[class*="add-template-form"]',
  addForm: (number = 1) => `[data-i="st-form-${number}-title"]`,
  checkbox: (number = 1) => `.st-cell-container:nth-child(${number}) [data-c*="-checkbox-element"]`,
  allCheckboxes: '[data-c*="-checkbox-element"]',
  visitSettingsCloseBtn: '[data-c="full-page-modal-context-bar"] [data-i="users-close-button"]',
  removeBtn: '[data-i="st-delete-config-btn"]',
  doneBtn: '.configure-done-btn',
  autoApplyTemplateChkBox: '[data-c="st-auto-apply-checkbox-element"]',
  allowMultipleOnPatientChkBox: '[data-c="st-allow-multiple-checkbox-element"]',
  allFormsMustBeCompletedChkBox: '[data-c="st-guardrail-checkbox-element"]',
  saveBtn: '[id="template-save-btn"]',
  ellipsisBtn: '[class="Button-sc-mmede5-0 jqVltn"]',
  ellipsisBtn1:':nth-child(4) > .Button-sc-mmede5-0',
  ellipsisMenu: '[data-i="users-save-button"] [data-icon="ellipsis-h"]',
  arrowDropdownOld: '.dropdown-content .dropdown-item-text',
  ellipsisMenuDisabled: '[data-i="users-save-button"][disabled] [data-icon="ellipsis-h"]',
  verifyVisitPlan: 'Verify',
  verifyCancelButton: '[data-i="verify-visit-plan-modal-cancel-btn"]',
  confirmAndVerifyButton: '[data-i="verify-visit-plan-modal-confirm-btn"]',
  confirmModalTitle: '.modal-card .modal-card-head .modal-card-title',
  verifyModalTitleText: 'Are you sure you want to verify this visit plan?',
  verifyModalSubtitle: '.modal-card-body [class*="SubTitle"]',
  verifyModalSubtitleText: 'After verifying this visit plan, you will be able to perform the following actions on production and test sites:',
  verifyModalSubtitleTextList1: 'Activate Visit Plan',
  verifyModalSubtitleTextList2: 'Apply Visit Plan Changes',
  verifyModalVisitPlanTitle: '.card-content > div:nth-child(1) > [class*="PropertyValue"]',
  verifyModalProtocolVersion: '.card-content > div:nth-child(2) > [class*="PropertyValue"]',
  cannotVerifyModalHeaderText: 'Cannot proceed with verification',
  cannotVerifyModalBodyText: 'These are forms in Draft status that need to be published.',
  cannotVerifyModalBody: '.modal-card-body > p',
  cannotVerifyModalFormRecord: (formRecordNumber = 2) => `.modal-card .modal-card-body > div:nth-child(${formRecordNumber})`,
  cannotVerifyModalFormRecordFormTitleColumn: '.column:nth-child(1)',
  cannotVerifyModalFormRecordFormStatusColumn: '.column:nth-child(2)',
  cannotVerifyModalFormRecordFormTitleColumnHeader: 'Form Title',
  cannotVerifyModalFormRecordStatusColumnHeader: 'Status',
  cannotVerifyModalCloseButton: '[data-i="draft-in-visit-plan-modal-cancel-btn"]',
  duplicateVisitPlan: 'Duplicate',
  duplicateCancelButton: '[data-i="duplicate-visit-plan-modal-cancel-btn"]',
  confirmAndDuplicateButton: '[data-i="duplicate-visit-plan-modal-confirm-btn"]',
  confirmAndDuplicateButtonText: 'Confirm & Duplicate',
  duplicateModalVisitPlanSourceInfo: '.modal-card-body > div:nth-child(1) div[class*="DetailValue"]',
  duplicateModalTitleInputField: '[data-i="title-input-element"]',
  duplicateModalDescriptionInputField: '[data-i="duplicate-visit-plan-description-textarea-element"]',
  duplicateModalProtocolVersionInputField: '[data-i="duplicate-visit-plan-version-input-element"]',
  removeVisitPlan: 'Remove',
  removeCancelButton: '[data-i="remove-visit-plan-modal-cancel-btn"]',
  confirmAndRemoveButton: '[data-i="remove-visit-plan-modal-confirm-btn"]',
  confirmAndRemoveButtonText: 'Confirm & Remove',
  removeModalTitleText: 'Are you sure you want to remove this visit plan?',
  removeDeactivateModalBody: '.modal-card-body p',
  removeModalBodyText: 'After a Visit Plan is Removed, the Visit Plan will not appear on the list of Visit Plans page.',
  disableVisitPlan: 'Disable',
  disableCancelButton: '[data-i="deactivate-visit-plan-modal-cancel-btn"]',
  confirmAndDisableButton: '[data-i="deactivate-visit-plan-modal-confirm-btn"]',
  confirmAndDisableButtonText: 'Confirm & Disable',
  disableModalTitleText: 'Are you sure you want to disable the visit plan?',
  disableModalBodyText: 'After you Disable the visit plan, you will not be able to Activate the visit plan on any new sites.',
  closeBtn: '[data-i="users-close-button"]',
  unsavedChanges: '.button-action-description',
  unsavedChangesText: 'Unsaved changes',
  draftStatus: '[class*="StatusBadgeContainer"]',
  draftStatusText: 'Draft',
  removedStatusText: 'Removed',
  disabledStatusText: 'Disabled',
  verifiedStatusText: 'Verified',
  versionNumber: '[class*="Version"]',
  versionNumberText: 'Version ',
  visitWithoutFormErrorMessageTitle: 'There are visits that do not have forms associated with them',
  visitWithoutFormErrorMessageSave: 'Click Save to continue.',
  visitWithoutFormErrorMessageCancel: 'Click Cancel to go back and associate the forms to a visit.',
  formWithoutVisitErrorMessageTitle: 'There are forms not associated to any visit',
  formWithoutVisitErrorMessageSave: 'If this is intentional, click Save. Forms not associated with any visit will be removed from the Visit Plan.',
  formWithoutVisitErrorMessageCancel: 'Otherwise, click Cancel to return to editing the Visit Plan.',
  totalFormsWithoutVisitErrorMessage: (totalForms) => `${totalForms} Forms are not associated with any visit`,
  singleFormWithoutVisitErrorMessage: '1 Form not associated with any visit',
  noTitleErrorMessage: 'Please fill in the template title.',
  visitPlanTitleAlreadyExists: (visitPlanTitle) => `Requested visit plan title already exists: ${visitPlanTitle}`,
  noVisitTitleErrorMessage: 'Please select a visit title',
  noVisitTypeErrorMessage: 'Please select a visit type',
  noFormOrVisitErrorMessage: 'Please select at-least one form and visit',
  noOidErrorMessage: 'Please select a visit oid',
  noOidUniqueErrorMessage: 'Please enter a unique OID',
  noGenericErrorMessage: 'Please correct the errors in your configuration',
  noNumberErrorMessage: 'Please fill in the empty # value.',
  noDayErrorMessage: 'Please fill in the empty Day.',
  noDayRangeErrorMessage: 'Please fill in the empty Day Range.',
  standardUpdateErrorMessage: 'Failed to update schedule template',
  standardSaveErrorMessage: 'Failed to save schedule template',
  confirmLoseChangesTxt: 'You have unsaved changes. Are you sure you want to exit and lose these changes?',
  confirmLoseChangesTitleTxt: 'Please Confirm',
  formAlreadyExistErrorMessageTxt: 'The selected form already exists in this visit plan.',
  formsWithoutVisitErrorModal: "//div[@class='message-body-container']",
  yesExitBtn: '[data-i="alert-modal-confirm-btn"]',
  errorModalSaveBtn: '[data-i="alert-modal-confirm-btn"]',
  yesExitBtnTxt: 'Yes-Exit',
  cancelBtn: '[data-i="alert-modal-cancel-btn"]',
  cancelBtnTxt: 'Cancel',
  continueBtnText: 'Continue',
  saveAsDraft: '.popover-inner button:first-child',
  arrowDropdown: '[class="popover-inner"]',
  confirmAndVerify: '[data-i="verify-visit-plan-modal-confirm-btn"]',
  addFormToTemplateBtn: '.add-template-form',
  addFormContainer: '.add-form-section',
};
export const configVisit = {
  configVisitModalTitleText: 'Configure Visit',
  visitTypeRadio: '.column [data-i="undefined-radio-element"]',
  fullScreenBtn: "//span[@class='icon']",
  eConsentVisitTypeText: 'eConsent visits include all forms within the eConsent group',
  configVisitDrawer: '[class*="drawer"]',
  visitTitle: '.column [data-i="title-input-element"]',
  visitOid: '[data-i="oid-input-element"]',
  visitOidDefaultValidation: '[class*="styles__Info-sc"]',
  visitOidErrorValidation: "div[class='field'] span[class='is-required-msg']",
  visitOidDefaultMessage: 'Cannot include spaces',
  visitOidErrorMessage: 'Please remove all spaces',
  visitTypeXpath: (visitType) => `//span[text()[contains(., "${visitType}")]]`,
  visitTypesRadioButtons: '[data-i="undefined-radio-element"]',
  expectedVisitWindowTxt: 'Expected Visit Window',
  expectedVisitWindowDropdown: '[class*="DaySettingContainer"] [class="columns"]:nth-child(2) [class*="Select"]',
  previousVisitDateField: '[id="react-select-9--value"]',
  dayNumber: '[data-i="daysFromStart-input-element"]',
  plusNumber: '[data-i="highDay-input-element"]',
  minusNumber: '[data-i="lowDay-input-element"]',
  helpTextElement: '[class*="InfoLabel"]',
  helpText: '-/+ is days before and after expected visit.',
  evwFieldLabel: (text) => `//label[contains(text(),'${text}')]`,
  numberOfDayAfterDay0Txt: '# of days after Day 0',
  numberOfDayAfterVisitPlanTxt: '# of days after previous visit date',
  removeVisit: (visit = 1) => `[data-c="st-visit-section"] [data-i="st-trash-settings-${visit}-btn"]`,
  addVisit: '.visit-add',
  editedVisitHeader: '[class="visit-day-header editing"]',
  visitSettings: (number = 1) => `.visit-day-header [data-i="st-form-settings-${number}-btn"]`,
  dragHandle: (visit = 1) => `.visit-day-header [data-i="st-form-${visit}-drag-handle"]`,
  reorderDestination: '[data-c="st-template-group-section"]',
  confirmRemoveBtn: '[class*="DeleteSection"] button',
  visits: '[class*="VisitDayColumnHeader"]',
  patientOrderForm: 'Participant Order Form',
  patientOrderFormCheckbox: '[data-c*="Allow forms to be editable only if previous form is complete.-checkbox-element"]',
  closeVisitConfig: '[class*="CloseButton"]',
  visitExpandIcon: '[class*="ExpandIcon"]',
};
export const eligibilityScreening = {
  day0Dropdown: '[class*="ContainerStyle"]:nth-child(4) .Select',
  startDateEligibilityDropdown: '[class*="ContainerStyle"]:nth-child(8) .Select',
  startDateScreeningDropdown: '[id*="react-select"]',
  endNumberPicker: '[data-i="highDay-input-element"]',
  endDateDescription: 'Select number of days after start date',
  endDateHelpText: 'Enter 0 if the visit starts and ends on the same day',
};
export const studyPeriod = {
  expectedVisitWindowDropdown: '[class*="DaySettingContainer"] [class="columns"]:nth-child(2) [class="Select-control"]',
  expectedVisitWindowDropdownArrow: '.Select-arrow-zone',
  dateFieldFromPreviousVisitDropdown: '[class*="DaySettingContainer"] [class="columns"]:nth-child(3) [class="Select-control"]',
  endNumberPicker: '[class*="VisitDayInput"] .input-number',
};
export const configureVisitPlan = {
  configureBtn: '[data-i="visit-plan-list-configure-button"]',
  configureModal: '[class*="ConfigureModalContainer"]',
  activateVisitPlanTab: '[data-i^="configure-modal-subheader-tab-Activate Visit Plan"]',
  activateVisitPlanText: 'Activate Visit Plan',
  applyVisitPlanChangesTab: '[data-i="configure-modal-subheader-tab-Apply Visit Plan Changes"]',
  applyVisitPlanChangesTabText: 'Apply Visit Plan Changes',
  applyToAmmendedConsentsTab: '[data-i="configure-modal-subheader-tab-Apply Amended Consent"]',
  applyToAmmendedConsentsTabText: 'Apply Amended Consents',
  viewVisitPlanHistoryTab: '[data-i="configure-modal-subheader-tab-View Visit Plan History"]',
  viewVisitPlanHistoryTabText: 'View Visit Plan History',
  viewEconsentHistoryTab: '[data-i="configure-modal-subheader-tab-View eConsent History"]',
  viewEconsentHistoryTabText: 'View eConsent History',
  informativeTextActivateVisitPlan: 'Visit plan will be applied to new participants added to the linked site.',
  informativeTextAmendConsent: 'Amended consents will be applied to existing participants for re-consent',
  visitPlanDropdown: '[data-c="visit-plans-dropdown"] .Select-control',
  visitPlanDropdownArrowBtn: '.Select--single > .Select-control:nth-child(1) .Select-arrow',
  siteDropdown: '[data-c="sites-dropdown"] .Select-control',
  siteNumberInSitesDropdown: '//div[contains(@class,"Select-menu-outer")]//div[contains(@class,"site-number")]',
  applyBtn: '[data-i*="confirm-btn"]',
  closeBtn: '[data-i*="cancel-btn"]',
  activateVisitPlanButtonText: 'Activate Visit Plan',
  confirmVisitPlanBtn: '[data-i*="confirm-btn"]',
  noEconsentInSiteMessage: 'There are no eConsent Forms assigned to the site/s:',
  applyBtnDisabled: '[data-i*="confirm-btn"][disabled]',
  areYouSureTxt: 'Are you sure you want to activate visit plan?',
  visitPlanTxt: 'Visit Plan',
  newPatientTxt: 'New Patients at',
  okayBtnModal: '[data-i="alert-modal-confirm-btn"]',
  noResultsFoundDropDdown: '[class="Select-noresults"]',
  noResultsFoundText: 'No results found',
  modalCardHeadText: 'Configure Visit Plans',
  visitPlanDropDownLabel: 'Visit Plan',
  affectedSitesDropDownLabel: 'Affected Sites',
  selectVisitsDropDownLabel: 'Select Visits',
  participantStatusDropDownLabel: 'Participant Status',
  affectedSitesDropdown: 'div[class*="Select affected-site-dropdown"] .Select-control',
  selectVisitsDropdown: '[data-c="select-visits-dropdown"] .Select-control',
  selectVisitsDropdownFutureVisitsOnly: "Apply changes to the participant's future visits only",
  selectVisitsDropdownAllParticipantsValue: "Apply changes to all of the participant's visits",
  participantStatusDropdown: 'div[class*="Select patient-status-dropdown"] .Select-control',
  applyVisitPlanButtonText: 'Apply Visit Plan',
  checkBoxIncludeAllParticipants: '[data-c="Include new participants added to existing sites-checkbox-element"]',
  checkBoxIncludeAllParticipantsLabel: 'Include new participants added to existing sites',
  consentHistoryDropdownArrow: 'span[id = "history-pop-over-btn"]',
  consentHistorySection: '[class*="ConsentTab"]',
  vpTransactionHistorySection: '[class*="VisitPlanTab"]',
  vpHistorySiteRecord: '[class*="VisitPlanTab"] [class*="Site-"]',
  visitPlanHistoryRecord: (siteName) => `//p[text()='${siteName}']//ancestor::div[contains(@class, 'SiteHeader')]`,
  visitPlanHistoryTransaction: (transactionRecord = 2) => `[class*="AccordionListWrapper"] [class*="TransactionList"]:nth-child(${transactionRecord})`,
  visitPlanHistoryTransactionDetailedRow: (transactionRecord = 1, transactionDetailedRow = 1) => `[class*="Transaction"]:nth-child(${transactionRecord}) [class*="Row"]:nth-child(${transactionDetailedRow})`,
  visitPlanHistoryFilterRecord: (siteName) => `input[data-c="${siteName}-checkbox-element"]`,
  visitPlanHistoryClearFilterRecord: (siteName) => `[data-i="${siteName}-on-delete"]`,
  // consentHistoryRecord: (siteName) => `//p[text()='${siteName}']//ancestor::div[contains(@class, 'styles__SiteHeader')]`,
  // consentHistoryTransaction: (transactionRecord) => `[class*="Accordion"] [class*="Transaction"]:nth-child(${transactionRecord})`,
  // consentHistoryTransactionDetailedRow: (transactionRecord, transactionDetailedRow) => `[class*="Transaction"]:nth-child(${transactionRecord}) [class*="Row"]:nth-child(${transactionDetailedRow})`,
  visitPlanHistoryExportLink: '[data-i="configure-visit-plan-modal-filedownload-btn"]',
  visitPlanHistoryFileName: 'vpHistory.csv',
  formKeyText: 'Form',
  transactionTypeKeyText: 'Transaction Type',
  patientStatusKeyText: 'Participant Status',
  visitPlanKeyText: 'Visit Plan',
  protocolVersionKeyText: 'Protocol Version',
  timeKeyText: 'Time',
  eConsentHistoryAmendStatus: 'Apply Amended Consent',
  eConsentHistoryActivatedStatus: 'Activated',
  eConsentHistoryInctivatedStatus: 'Inactivated',
  eConsentHistoryAssignedToSite: 'Assigned to Site',
  eConsentHistorySiteRecord: '[class*="AccordionList"] [class*="Site-"]',
  eConsentHistoryViewAllButton: '//button[text()[contains(., "View All")]]',
  eConsentHistoryViewAllButtonText: 'View All',
  eConsentHistoryViewLessButton: '//button[text()[contains(., "View Less")]]',
  eConsentHistoryViewLessButtonText: 'View Less',
  amendConsentParticipantStatusDropdown: 'div[class*="Select--multi"] .Select-control',
  amendConsentParticipantStatusDropdownName: 'Participant Status',
  amendConsentForm: (formName) => `//p[text()='${formName}']//ancestor::div[contains(@class, 'e-consent-form context-card')]`,
  applyConsentButton: '[data-i*="confirm-btn"]',
  applyConsentButtonText: 'Apply Consent',
  applyConsentConfirmText: 'Amended consents will be applied to existing participants for re-consent',
  confirmApplyConsentTitleTxt: 'Please Confirm',
  selectedAmendConsentForm: (siteName) => `//p[text()='${siteName}']//ancestor::div[contains(@class, 'selected-form context-card')]`,
  filterBtn: '[data-i="filter-btn"]',
};
export const ongoingForms = {
  ongoingFormToggle: '[class*="RecurringFormContainer"] .icon-container',
  createOngoingFormGroup: '[class="add-recurring-form-text"]',
  oid: '[data-i="OID-input-element"]',
  title: '.column [data-i="title-input-element"]',
  oidDefaultValidation: '[class*="styles__Info-sc"]',
  ongoingForms: 'div:nth-child(1) .dropdown-icon .Select-control',
  selectOngoingFormDropdown: (form = 1) => `div:nth-child(${form}) > .dropdown-icon .Select`,
  ongoingFormsGroupDragHandle: (form = 1) => `.add-on-going [data-i="st-form-${form}-drag-handle"]`,
  ongoingFormDragHandle: (form = 1) => `div:nth-child(${form}) > .dropdown-icon > .st-drag-icon`,
  ongoingFormGroup: (form = 1) => `.recurring-form-list .add-on-going:nth-child(${form}) .form-title`,
  ongoingFormGroupSettings: (form = 1) => `.recurring-form-list .add-on-going:nth-child(${form}) [data-i*="recurring-form-settings"]`,
  // deleteOngoingFormGroup: (form = 1) => `.recurring-form-list .add-on-going:nth-child(${form}) [data-icon="trash-alt"]`,
  deleteOngoingFormGroup: (form = 1) => `.recurring-form-list .add-on-going:nth-child(${form}) .recurring-form-trash-icon`,
  // deleteOngoingForm: (form = 1) => `div:nth-child(${form}) > .dropdown-icon > [data-icon="trash-alt"]`,
  deleteOngoingForm: (form = 1) => `div:nth-child(${form}) > .dropdown-icon > .cross-icon`,
  addForm: '.second-container .add-form',
  ongoingFormSelectedFormTitle: '[class*="Select drop-down has-value"] [class*="Select-value "]',
};
export const adHocForms = {
  container: '[class*="RecurringFormContainer"]:last-child',
  adHocFormsToggle: '[class*="RecurringFormContainer"]:last-child .icon-container',
  createAdHocForm: '[class="add-recurring-form-text"]',
  adHocForms: '.recurring-form-list .add-ad-hoc',
  formSettings: (number = 1) => `.recurring-form-values:nth-child(${number}) .recurring-form-settings-icon-btn`,
  formDragSrc: (form = 2) => `.recurring-form-values:nth-child(${form}) .recurring-drag-icon`,
  formDragDest: (form = 1) => `.recurring-form-values:nth-child(${form})`,
  addedForm: (form = 1) => `.recurring-form-list .add-ad-hoc:nth-child(${form})`,
  closeSettings: '[class*="CloseButton"]',
  adHocFormSelectedFormTitle: '[class*="Select drop-down has-value"] [class*="Select-value "]',
  removeAdhocForm: (formNumber = 1) => `.recurring-form-values:nth-child(${formNumber}) .recurring-form-trash-icon-btn`,
  adhocFormStatusIcon: (formIndex = 1, statusCode = 'ready-status') => `[class*="recurring-form-values"]:nth-child(${formIndex}) > div > div > [class*="${statusCode}"]`,
};
export const formSettingsCog = '[data-i^="st-form-settings"]';
export const buttons = {
  add: 'button[data-i="st-add-btn"]',
  edit: 'button[data-i="st-edit-btn"]',
  save: 'button[data-i="st-save-btn"]',
  cancel: 'button[data-i="st-cancel-btn"]',
  addHeader: 'button[data-i="add-st-header-btn"]',
  addForm: 'button[data-i="add-st-form-btn"]',
  addDay: 'button[data-i="add-st-day-btn"]',
  configModalSave: 'button[data-i="st-save-config-btn"]',
  configModalCancel: 'button[data-i="st-cancel-config-btn"]',
  configModalDelete: 'button[data-i="st-delete-config-btn"]',
};
export const fields = {
  templateName: 'input[data-i="st-name-input-element"]',
};
export const additionalDetails = {
  tableFirstRow: 'tr[data-c]:nth-child(1)',
  ellipsisIcon: '[data-icon="ellipsis-h"]',
  viewInfoBtn: '[data-i="view-info-btn"]',
  viewInfoModal: 'div.modal-card',
  closeBtn: '[data-i="undefined-cancel-btn"]',
  historySection: '[class*="HistoryContainer"]',
  siteRecord: '[class*="HistoryContainer"] [class*="Site-"]',
  // siteRecord: (record = 2) => `[class*="HistoryContainer"] [class*="Site-"]:nth-child(${record})`, // first record in the list = child 2
  transactionHistoryRow: (row = 1) => `[class*="Transaction"] [class*="Row"]:nth-child(${row})`,
  viewAllButton: '//button[text()[contains(., "View All")]]',
  viewAllButtonText: 'View All',
  viewLessButton: '//button[text()[contains(., "View Less")]]',
  viewLessButtonText: 'View Less',
  transactionTypeKeyText: 'Transaction Type',
  patientsKeyText: 'Patients',
  statusKeyText: 'Status',
  visitsKeyText: 'Visits',
  timeKeyText: 'Time',
  timeFieldValue: '[class*="Transaction"] [class*="Row"]:nth-child(5) div:nth-child(2)',
};
export const visitHeader = {
  visitTitle: '[class*="VisitTitle"]',
  visitOid: '[class*="VisitOID"]',
};

export const allButtons = {
  vpAddBtn: '[data-i="forms-add-button"]',
  vpAddFormsBtn: '[class="style__AddFormButton-sc-v8e7kn-8"]',
  vpSaveBtn: '[id="template-save-btn"]',
  vpEclpseBtn: '[class=":nth-child(4) > .Button-sc-mmede5-0"]',
  vpVerifyBtn: '[class="dropdown-content > :nth-child(1)"]',
  vpConfirmBtn: '[data-i="verify-visit-plan-modal-confirm-btn"]',
  vpCloseBtn: '[class="close-button > .Button-sc-mmede5-0"]'
  
};

export const extraVP = {
};

export const vpBasic = {
 vpTitle: '[data-i="title-input-element"]',
 vpDesc: '[data-i="visit-plan-description-textarea-element"]',
 vpProtocol: '[data-i="protocolVersion-input-element"]',
 vpSearch: '[data-i="searchTerm-input-element"]'
};

export const vpVisitType = {
  addVisitType: '[class="visit-add"]',
  visitTitle0: '[class="field basic-input"]',
  visitTitle1: '[data-i="title-input-element"]',
  visitOid: '[data-i="oid-input-element"]',

  econsentVisitType: ':nth-child(3) > .column > .style__FormTypeCard-sc-4uw5cu-5 > .form-type-radio > .field > .radio-control > .control__indicator',
  screeningVisitType: ':nth-child(4) > .column > .style__FormTypeCard-sc-4uw5cu-5 > .form-type-radio > .field > .radio-control > .control__indicator',
  eligibilityVisitType: ':nth-child(5) > .column > .style__FormTypeCard-sc-4uw5cu-5 > .form-type-radio > .field > .radio-control > .control__indicator',
  studyPeriodVisitType: ':nth-child(6) > .column > .style__FormTypeCard-sc-4uw5cu-5 > .form-type-radio > .field > .radio-control > .control__indicator',
  unscheduledVisitType: ':nth-child(7) > .column > .style__FormTypeCard-sc-4uw5cu-5 > .form-type-radio > .field > .radio-control > .control__indicator',
  
};

export const vpForms = {
  searchForm: '[data-i="item-search-input-element"]',
  selectForm: '[class="styles__StyledSpan-sc-hcndog-0 eArrQM text-value item-checkbox"]',
  addFormBtn:'[data-i="duplicate-visit-plan-modal-confirm-btn"]',
  associateForm: '[class="style__CheckboxContainer-sc-v8e7kn-4 > .checkbox-container > :nth-child(1) > .checkbox-component > .checkbox-field-wrapper > .field > label"]',
};

export const vpAdhocForms = {

};

export const vpRecurForms = {

};
export const vpOngoingForms = {

};

